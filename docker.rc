# docker utils

dk(){
  case "$1" in
    rc)
      vi ${BASH_SOURCE[0]}
      ;;
    *)
      docker $@
      ;;
  esac
}
# docker --debug run ...

alias dki='docker images -a'
alias dkps="docker ps -a"
alias dkpl='docker pull'
#alias dku="docker run --rm -ti ubuntu bash"
dku(){
  ~/dev/dailyops/kc/dklet/ubuntu1804 sh 
}
#/bin/bash -c "while true; do date; sleep 6; done"
# moby
alias busybox="docker run --rm -it busybox"

dksearch(){
  name=${1:-ruby}
  open "https://store.docker.com/search?q=${name}&type=image&source=verified"
}

dksyslog(){
  # on mac
  syslog -w -k Sender Docker
  # on linux
  # journal -f -u docker
}

# 容器网络ip
function dkip(){
  docker inspect --format='{{.NetworkSettings.IPAddress}}' $*
}

# 根据名字获取容器id, 可用于判断是否存在
# 状态判断?
function container_id_by_name(){
  [ $# -lt 1 ] && return 1
  name=$1
  docker ps --filter "name=$name" --format "{{.ID}}"
}

function dktry(){
  echo ==run:
  echo   docker run --rm $*
  docker run -ti --rm $* 
}

function dksh(){
  docker run --rm -it ${1:-busybox} ${2:-sh}
}

function dkbash(){
  docker run --rm -ti ${1:-ubuntu} bash
}

# 进入容器
function dkin(){
  echo ==exec into: $*
  if [ $# -lt 2 ];then
    docker exec -it $1 sh 
  else
    docker exec -it $*
  fi
}

## Docker Compose
alias dcom='docker-compose'

# 容器清理
# http://www.doublecloud.org/2015/05/simple-script-to-list-and-remove-all-stopped-docker-containers/
function dkrm(){
  exit_code=${1:-0}
  #cmd="docker ps -aq --filter 'exited=${exit_code}'"
  #ids="`$cmd`"
  ids=$(docker ps -aq --filter "exited=${exit_code}")
  if [ -n "$ids" ];then
    docker rm -v $ids
    echo ==removed containers ids: $ids by: 
  fi
}

function dkrmbyimg(){
  docker rm `docker ps -aq -f='ancestor=$1'`
}

# 镜像清理
#remove unused docker resources(stopped containers, untagged and dangling images, unused images)
#https://stackoverflow.com/questions/32723111/how-to-remove-old-and-unused-docker-images
function dkrmi(){
  iids=$(docker images -f "dangling=true" -q)
  if [ -n "$iids" ];then
    docker rmi -f $iids 
    echo ==removed images $iids
  fi
}

dkclean(){
  #docker system prune $* #-a
  docker system prune -f
}

## log message
#function logserver(){
#  docker run --rm -it -p 1514:1514 --privileged logstash logstash -e 'input { syslog { port => 1514 } } output { stdout { codec => rubydebug } }'
#}
## echo ruok | nc 192.168.99.100 1514
#
#function logmonit(){
#  docker run --rm -it logstash logstash -e 'input { kafka { zk_connect => "caerus.x:2000/kafka" group_id => "sensor" topic_id => "staging.normal" codec => plain } } output { stdout { codec => rubydebug } }'
#}

function container_by_name(){
  dkname=$1
  docker container ls --filter "name=$dkname" --quiet --all
}

# clean volume
#While using data volume containers, you have to remove container with -v flag as docker rm -v. 
#If you don't use the -v flag, the volume will end up as a dangling volume and remain in to the local disk
#To delete all dangling volumes, use the following command
#docker volume rm `docker volume ls -q -f dangling=true`

## docker log
# root /var/lib/docker/containers
# docker info |grep 'Logging Driver'
# docker inspect -f '{{.HostConfig.LogConfig.Type}}' <CONTAINER> 
# 查看log json-file 所在host文件
# docker inspect --format='{{.LogPath}}' $1
# /var/lib/docker/containers/2973925e3c73981ae252fbe704011e1d696ff958d33e98493a9c4ec4e3740e24/2973925e3c73981ae252fbe704011e1d696ff958d33e98493a9c4ec4e3740e24-json.log
# echo '' | sudo tee $(docker inspect --format='{{.LogPath}}' <container_name_or_id>)

## Alpine
# docker run -it --log-driver none alpine ash
# docker run -it --log-opt max-size=10m --log-opt max-file=3 alpine ash

## Docker daemon on ubuntu 
#安装中主要目录 /var/lib/docker
# 配置文件 /etc/docker/daemon.json
# service /lib/systemd/system/docker.service
# 实际的docker image存储在主机的什么位置？
# docker info # 查看Storage Driver
# 主要占空间的是： /var/lib/docker/aufs
# du -hs /var/lib/docker/aufs
#On Ubuntu you can "play" with images running
#sudo baobab /var/lib/docker
#Actually, images are stored within /var/lib/docker/aufs/diff

# ctop monit
# 基于环境一致性的考虑，后续不再研究docker on mac
# 主要精力研究docker on ubuntu, 和实际使用场景一致

## run nginx in docker 
function dkng(){
  # todo 配置本地化
  docker run -d --name dkng --rm -p 2080:80 nginx
}

function dklogfile(){
  conid=$1 #b299189c3e70
  find /var/lib/docker/containers/${conid}*/*-json.log
}

# 容器中文环境
function dkch(){
  docker exec -it ubuntu env LANG=C.UTF-8 /bin/bash
}

# 如何解决docker build 时的翻墙问题
function dkbuild(){
  fanqiang #设置翻墙proxy
  # 通过build-arg可将外部环境变量传到容器中使用(注意当没定义这些环境变量时可能会报错哦！）
  docker build --build-arg http_proxy --build-arg GEM_SOURCE $*
}

export local_dk_registry=http://localhost:5000
# curl http://localhost:5000/v2/_catalog
# persist in /var/lib/registry in container as volume or mount on host, cloud storage driver
function dkreg(){
  /l/golab/gopath/bin/reg --registry $local_dk_registry --force-non-ssl $* 
}

#http://guide.daocloud.io/dcs/docker-9153151.html
# 专用加速地址：  http://9c506ecf.m.daocloud.io
# daocloud.io/ubuntu
function dkmirror(){
  echo https://registry.docker-cn.com
}

# docker pull registry.docker-cn.com/library/ubuntu
# docker pull docker.io/library/ubuntu  # same as docker pull ubuntu
# docker pull daocloud.io/ubuntu
# docker pull myregistrydomain:port/foo/bar
# todo add more here
function dkptest(){
  img=${1:-cao7113/hirack:v0.1.8} #ubuntu
  mirrors=(registry.docker-cn.com)
  for mirror in ${mirrors[*]};do
    aimg=$mirror/$img
    echo ==test image: $aimg
    time docker pull $aimg
    docker rmi -f $aimg;
  done
  echo done
}

# test pull dk
function dkgcr(){
  echo docker pull gcr.io/google_containers/pause-amd64:3.0 # 194k
  docker pull gcr.io/google_containers/pause-amd64:3.0 # 194k
}

# 列出该网络下所有容器
dnetps(){
  docker network inspect -f '{{ range $key, $value := .Containers }}{{ printf "%s\n" $value.Name }}{{ end }}' $@
}

return 0

## volumes
system location on mac /Volumes/docker
linkto user home xxx
# docker volume create pgdata

# minikube start --help

docker plugin install --grant-all-permissions vieux/sshfs
