#!/usr/bin/env rundklet

write_dockerfile <<~Desc
  FROM postgres:9.6-alpine
  LABEL maintainer=dailyops
  ADD entrypoint-initdb.d /docker-entrypoint-initdb.d
Desc

register :password, 'password'

task :main do
  system <<~Desc
    #docker run -d --name hipg -e POSTGRES_PASSWORD=#{fetch(:password)} #{docker_image}
    docker run -d --name hipg -e POSTGRES_PASSWORD=#{fetch(:password)} \
      -v "#{script_path}/conf/postgresql.conf":/etc/postgresql/postgresql.conf \
      -v "#{script_path.parent.join('tmp/hipg-data')}":/var/lib/postgresql/data \
      #{docker_image} -c 'config_file=/etc/postgresql/postgresql.conf'
    # -c 'shared_buffers=256MB' -c 'max_connections=200'
  Desc
  
  t0 = Time.now
  until system("docker exec hipg pg_isready > /dev/null")
    puts "waiting for initdb..."
    sleep 1
  end
  puts "wait taken #{Time.now - t0} seconds"
  invoke :psql
end

custom_commands do
  desc 'sampleconf', ''
  def sampleconf
    # debian /usr/share/postgresql/postgresql.conf.sample
    system <<~Desc
      docker run -i --rm #{docker_image} cat /usr/local/share/postgresql/postgresql.conf.sample | tee #{script_path}/conf/postgresql.conf.sample
      docker run -i --rm #{docker_image} cat /usr/local/share/postgresql/pg_hba.conf.sample | tee #{script_path}/conf/pg_hba.conf.sample
    Desc
  end

  desc 'psql', 'open a psql connection'
  def psql
    system <<~Desc
      docker exec -it hipg psql -U postgres docker
    Desc
  end

  # use legacy link --link <name or id>:alias
  desc 'psql_link', 'open a psql connection using link mode'
  def psql_link
    pgurl = "postgres://postgres:#{fetch(:password)}@hipg/postgres"
    system <<~Desc
      docker run -it --rm --link hipg #{docker_image} psql #{pgurl}
    Desc
  end
end

let_cli_magic_start!
